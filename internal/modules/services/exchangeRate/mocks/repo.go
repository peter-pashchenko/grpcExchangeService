// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/peter-pashchenko/grpcExchangeService/internal/models"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

type Repo_Expecter struct {
	mock *mock.Mock
}

func (_m *Repo) EXPECT() *Repo_Expecter {
	return &Repo_Expecter{mock: &_m.Mock}
}

// CheckConnection provides a mock function with given fields: ctx
func (_m *Repo) CheckConnection(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_CheckConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckConnection'
type Repo_CheckConnection_Call struct {
	*mock.Call
}

// CheckConnection is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repo_Expecter) CheckConnection(ctx interface{}) *Repo_CheckConnection_Call {
	return &Repo_CheckConnection_Call{Call: _e.mock.On("CheckConnection", ctx)}
}

func (_c *Repo_CheckConnection_Call) Run(run func(ctx context.Context)) *Repo_CheckConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repo_CheckConnection_Call) Return(_a0 error) *Repo_CheckConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repo_CheckConnection_Call) RunAndReturn(run func(context.Context) error) *Repo_CheckConnection_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRate provides a mock function with given fields: ctx, rate
func (_m *Repo) SaveRate(ctx context.Context, rate *models.ExchangeRate) error {
	ret := _m.Called(ctx, rate)

	if len(ret) == 0 {
		panic("no return value specified for SaveRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ExchangeRate) error); ok {
		r0 = rf(ctx, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_SaveRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRate'
type Repo_SaveRate_Call struct {
	*mock.Call
}

// SaveRate is a helper method to define mock.On call
//   - ctx context.Context
//   - rate *models.ExchangeRate
func (_e *Repo_Expecter) SaveRate(ctx interface{}, rate interface{}) *Repo_SaveRate_Call {
	return &Repo_SaveRate_Call{Call: _e.mock.On("SaveRate", ctx, rate)}
}

func (_c *Repo_SaveRate_Call) Run(run func(ctx context.Context, rate *models.ExchangeRate)) *Repo_SaveRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.ExchangeRate))
	})
	return _c
}

func (_c *Repo_SaveRate_Call) Return(_a0 error) *Repo_SaveRate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repo_SaveRate_Call) RunAndReturn(run func(context.Context, *models.ExchangeRate) error) *Repo_SaveRate_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
